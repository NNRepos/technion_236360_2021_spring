%{
#include "parse_utils.h"
%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token ID
%token NUM
%token STRING
%token DOTS
%token SWITCH
%token CASE
%token DEFAULT
%token COLON

//priority 1
%right ASSIGN

//priority 3
%left OR

//priority 4
%left AND

// priority 8
%left EQUAL_UNEQUAL

// priority 9
%nonassoc INEQUALITY

// priority 11
%left PLUS_MINUS

// priority 12
%left MULT_DIV

// priority 14
%right NOT

// priority 16
%left LBRACKET RBRACKET LBRACE RBRACE LPAREN RPAREN

// top priority (dangling else)
%right ELSE
%%

Program: Funcs
    {ParseUtils::instance().ParseProgram(yylineno);}
Funcs: %empty
    {ParseUtils::instance().ParseFuncs(yylineno);}
Funcs: FuncDecl Funcs
    {ParseUtils::instance().ParseFuncs(yylineno);}
FuncDecl: FuncHead LBRACE Statements RBRACE
    {ParseUtils::instance().ParseFuncDecl(yylineno, $1);}
FuncHead: RetType ID LPAREN Formals RPAREN
    {$$ = ParseUtils::instance().ParseFuncHead(yylineno, $1, $2, $4);}
RetType: Type
    {$$ = ParseUtils::instance().ParseRetType(yylineno, $1);}
RetType: VOID
    {$$ = ParseUtils::instance().ParseRetType(yylineno);}
Formals: %empty
    {$$ = ParseUtils::instance().ParseFormals(yylineno);}
Formals: FormalsList
    {$$ = ParseUtils::instance().ParseFormals(yylineno, $1);}
FormalsList: FormalDecl
    {$$ = ParseUtils::instance().ParseFormalsList(yylineno);}
FormalsList: FormalDecl COMMA FormalsList
    {$$ = ParseUtils::instance().ParseFormalsList(yylineno, $1);}
FormalDecl: Type ID
    {$$ = ParseUtils::instance().ParseFormalDecl(yylineno);}
Statements: Statement
    {$$ = ParseUtils::instance().ParseStatements(yylineno);}
Statements: Statements Statement
    {$$ = ParseUtils::instance().ParseStatements(yylineno, $1);}
Statement: LBRACE Statements RBRACE
    {$$ = ParseUtils::instance().ParseStatementOfStatements(yylineno);}
Statement: Type ID SC
    {$$ = ParseUtils::instance().ParseStatementType(yylineno);}
Statement: Type ID ASSIGN Exp SC
    {$$ = ParseUtils::instance().ParseStatementTypeAssign(yylineno);}
Statement: ID ASSIGN Exp SC
    {$$ = ParseUtils::instance().ParseStatementAssign(yylineno);}
Statement: Call SC
    {$$ = ParseUtils::instance().ParseStatementCall(yylineno);}
Statement: RETURN SC
    {$$ = ParseUtils::instance().ParseStatementReturn(yylineno);}
Statement: RETURN Exp SC
    {$$ = ParseUtils::instance().ParseStatementReturnExp(yylineno);}
Statement: IF LPAREN Exp RPAREN Statement
    {$$ = ParseUtils::instance().ParseStatementIf(yylineno);}
Statement: IF LPAREN Exp RPAREN Statement ELSE Statement
    {$$ = ParseUtils::instance().ParseStatementIfElse(yylineno);}
Statement: WHILE LPAREN Exp RPAREN Statement
    {$$ = ParseUtils::instance().ParseStatementWhile(yylineno);}
Statement: BREAK SC
    {$$ = ParseUtils::instance().ParseStatementBreak(yylineno);}
Statement: CONTINUE SC
    {$$ = ParseUtils::instance().ParseStatementContinue(yylineno);}
Statement:  SWITCH LPAREN Exp RPAREN LBRACE CaseList RBRACE
    {$$ = ParseUtils::instance().ParseStatementSwitch(yylineno);}
Call: ID LPAREN ExpList RPAREN
    {$$ = ParseUtils::instance().ParseCall(yylineno);}
Call: ID LPAREN RPAREN
    {$$ = ParseUtils::instance().ParseCall(yylineno, $1);}
ExpList: Exp
    {$$ = ParseUtils::instance().ParseExplist(yylineno);}
ExpList: Exp COMMA ExpList
    {$$ = ParseUtils::instance().ParseExplist(yylineno, $1);}
Type: INT
    {$$ = ParseUtils::instance().ParseInt(yylineno);}
Type: BYTE
    {$$ = ParseUtils::instance().ParseByte(yylineno);}
Type: BOOL
    {$$ = ParseUtils::instance().ParseBool(yylineno);}
Exp: LPAREN Exp RPAREN
    {$$ = ParseUtils::instance().ParseParentheses(yylineno);}
Exp: Exp PLUS_MINUS Exp
    {$$ = ParseUtils::instance().ParseBinop(yylineno);}
Exp: Exp MULT_DIV Exp
    {$$ = ParseUtils::instance().ParseBinop(yylineno);}
Exp: ID
    {$$ = ParseUtils::instance().ParseID(yylineno);}
Exp: Call
    {$$ = ParseUtils::instance().ParseCallExp(yylineno);}
Exp: NUM
    {$$ = ParseUtils::instance().ParseNum(yylineno);}
Exp: NUM B
    {$$ = ParseUtils::instance().ParseNumB(yylineno);}
Exp: STRING
    {$$ = ParseUtils::instance().ParseString(yylineno);}
Exp: TRUE
    {$$ = ParseUtils::instance().ParseTrue(yylineno);}
Exp: FALSE
    {$$ = ParseUtils::instance().ParseFalse(yylineno);}
Exp: NOT Exp
    {$$ = ParseUtils::instance().ParseNot(yylineno);}
Exp: Exp AND Exp
    {$$ = ParseUtils::instance().ParseAnd(yylineno);}
Exp: Exp OR Exp
    {$$ = ParseUtils::instance().ParseOr(yylineno);}
Exp: Exp EQUAL_UNEQUAL Exp
    {$$ = ParseUtils::instance().ParseRelOp(yylineno);}
Exp: Exp INEQUALITY Exp
    {$$ = ParseUtils::instance().ParseRelOp(yylineno);}
Exp: LPAREN Type RPAREN Exp
    {$$ = ParseUtils::instance().ParseCast(yylineno);}
CaseList: CaseDecl CaseList
    {$$ = ParseUtils::instance().ParseCaseList(yylineno);}
CaseList: CaseDecl
    {$$ = ParseUtils::instance().ParseCaseList(yylineno, $1);}
CaseList: DEFAULT COLON Statements
    {$$ = ParseUtils::instance().ParseCaseDefault(yylineno);}
CaseDecl: CASE NUM COLON Statements
    {$$ = ParseUtils::instance().ParseCaseDecl(yylineno);}

%%

void yyerror(const char * message)
{
	errorSyn(yylineno);
	exit(0);
}